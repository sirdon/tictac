[{"G:\\React Practice\\Tic-Tac-Toe\\tictac\\src\\index.js":"1","G:\\React Practice\\Tic-Tac-Toe\\tictac\\src\\App.js":"2","G:\\React Practice\\Tic-Tac-Toe\\tictac\\src\\components\\Game.js":"3","G:\\React Practice\\Tic-Tac-Toe\\tictac\\src\\components\\Board.js":"4","G:\\React Practice\\Tic-Tac-Toe\\tictac\\src\\components\\Square.js":"5","G:\\React Practice\\Tic-Tac-Toe\\tictac\\src\\Grid.js":"6"},{"size":157,"mtime":1607347833918,"results":"7","hashOfConfig":"8"},{"size":587,"mtime":1607352809053,"results":"9","hashOfConfig":"8"},{"size":2615,"mtime":1607334856055,"results":"10","hashOfConfig":"8"},{"size":960,"mtime":1607331325309,"results":"11","hashOfConfig":"8"},{"size":201,"mtime":1607330713992,"results":"12","hashOfConfig":"8"},{"size":602,"mtime":1607352444715,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1a52dak",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"G:\\React Practice\\Tic-Tac-Toe\\tictac\\src\\index.js",[],["29","30"],"G:\\React Practice\\Tic-Tac-Toe\\tictac\\src\\App.js",[],"G:\\React Practice\\Tic-Tac-Toe\\tictac\\src\\components\\Game.js",["31","32"],"import React, { Component } from 'react'\r\nimport Board from './Board';\r\n\r\nexport default class Game extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            xIsNext:true,\r\n            stepNumber:0,\r\n            history:[\r\n                {squares:Array(9).fill(null)}\r\n            ]\r\n        }\r\n    }\r\n    jumpTo(step){\r\n        this.setState({\r\n            stepNumber:step,\r\n            xIsNext:(step%2)===0\r\n        })\r\n    }\r\n    handleClick(i){\r\n        const history = this.state.history.slice(0,this.state.stepNumber+1);\r\n        const current = history[history.length-1];\r\n        const squares = current.squares.slice();\r\n        const winner = calculateWinner(squares);\r\n        if(winner || squares[i]){\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X':'O';\r\n        this.setState({\r\n            history:history.concat({\r\n                squares:squares\r\n            }),\r\n            xIsNext:!this.state.xIsNext,\r\n            stepNumber:history.length\r\n        })\r\n    }\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n        const moves = history.map((step,move)=>{\r\n        const desc = move ? 'go to #'+move:'Start the Game';\r\n        return(\r\n            <li key={move}>\r\n                <button onClick={()=>{this.jumpTo(move)}}>\r\n                {desc}\r\n                </button>\r\n            </li>\r\n        )\r\n        });\r\n        let status;\r\n        if(winner){\r\n            status='Winner is  '+winner;\r\n        }else{\r\n            status = 'Next Player is '+ (this.state.xIsNext? 'X':'O');\r\n        }\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board onClick={(i)=>this.handleClick(i)}\r\n                        squares={current.squares}\r\n                    ></Board>\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <ul>{moves}</ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares){\r\n    const lines = [\r\n        [0,1,2],\r\n        [3,4,5],\r\n        [6,7,8],\r\n        [0,3,6],\r\n        [1,4,7],\r\n        [2,5,8],\r\n        [0,4,8],\r\n        [2,4,6]\r\n    ]\r\n    for(let i=0;i<lines.length;i++){\r\n        const [a,b,c] = lines[i];\r\n        if(squares[a] && squares[a]==squares[b] && squares[a]==squares[c]){\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}","G:\\React Practice\\Tic-Tac-Toe\\tictac\\src\\components\\Board.js",[],"G:\\React Practice\\Tic-Tac-Toe\\tictac\\src\\components\\Square.js",[],["33","34"],"G:\\React Practice\\Tic-Tac-Toe\\tictac\\src\\Grid.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":87,"column":36,"nodeType":"41","messageId":"42","endLine":87,"endColumn":38},{"ruleId":"39","severity":1,"message":"40","line":87,"column":62,"nodeType":"41","messageId":"42","endLine":87,"endColumn":64},{"ruleId":"35","replacedBy":"43"},{"ruleId":"37","replacedBy":"44"},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["45"],["46"],"no-global-assign","no-unsafe-negation"]